{"version":3,"sources":["store/index.tsx","store/actions.ts","components/ToDoForm/style.tsx","components/ToDoForm/index.tsx","components/ToDoList/style.tsx","components/ToDo/style.tsx","components/IconButton.tsx","components/ToDo/index.tsx","components/ToDoList/index.tsx","components/SortFilter/style.tsx","components/SortFilter/index.tsx","index.tsx"],"names":["Priority","todoCreated","createAction","todoEdited","todoPriorityChanged","todoDeleted","priorityCleared","allTodosCleared","sortChanged","sortApplied","todoEditModeEntered","actions","todoCompletedStateModified","persistConfig","key","storage","priorities","Object","keys","filter","value","isNaN","Number","priorityToString","p","persistedReducer","persistReducer","state","toDos","editId","undefined","sort","sorted","action","produce","draft","type","getType","modifiedTodo","find","todo","id","payload","currentState","completed","index","length","editedTodo","content","newContent","priorityToDo","priority","newPriority","a","b","store","createStore","composeWithDevTools","applyMiddleware","useTypedSelector","persistStore","useSelector","Form","styled","form","Input","input","Select","select","Button","button","ToDoForm","dispatch","useDispatch","useState","setContent","setPriority","onSubmit","e","preventDefault","uuid","v4","onChange","target","placeholder","selectedIndex","map","ListWrapper","div","Wrapper","Header","TextEditor","IconButton","ToDo","isInEditMode","tempValue","setTemp","useDrag","item","collect","monitor","opacity","isDragging","drag","ref","checked","onClick","size","ToDoList","todos","onDrop","clearGroup","useDrop","drop","accept","isOver","canDrop","disabled","style","flex","background","SortFilter","isDiabled","options","indexOf","option","rootElement","document","getElementById","render","DndProvider","backend","Backend","isSorted","useEffect","className"],"mappings":"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","file":"static/js/main.85aedc5a.chunk.js","sourcesContent":["import { Actions, actions } from \"./actions\";\nimport { Reducer, createStore, applyMiddleware } from \"redux\";\nimport { TypedUseSelectorHook, useSelector } from \"react-redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport produce from \"immer\";\nimport { getType } from \"typesafe-actions\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\"; // defaults to localStorage for web\n\nconst persistConfig = {\n  key: \"root\",\n  storage\n};\n\nexport enum Priority {\n  lifeChanging,\n  important,\n  meh\n}\n\nexport const priorities = Object.keys(Priority).filter(\n  value => !isNaN(Number(value))\n);\n\nexport const priorityToString = (p: number): string => {\n  return p === 0 ? \"Life Changing\" : p === 1 ? \"Important\" : \"Meh\";\n};\n\nexport type ToDo = {\n  id: string;\n  index: number;\n  priority: Priority;\n  content: string;\n  completed: boolean;\n};\n\nconst initialState = () => ({\n  toDos: [] as ToDo[],\n  editId: undefined as undefined | string,\n  sort: \"Index\",\n  sorted: false\n});\n\nexport type State = Readonly<ReturnType<typeof initialState>>;\n\nexport const rootReducer: Reducer<State, Actions> = (\n  state = initialState(),\n  action: Actions\n) =>\n  produce(state, draft => {\n    switch (action.type) {\n      case getType(actions.todoCompletedStateModified):\n        const modifiedTodo = draft.toDos.find(\n          todo => todo.id === action.payload\n        );\n        if (modifiedTodo) {\n          const currentState = modifiedTodo.completed;\n          modifiedTodo.completed = !currentState;\n        }\n        break;\n      case getType(actions.todoEditModeEntered):\n        draft.editId = action.payload;\n        break;\n      case getType(actions.todoCreated):\n        draft.toDos = [\n          ...draft.toDos,\n          { ...action.payload, index: draft.toDos.length, completed: false }\n        ];\n        draft.sorted = false;\n        break;\n      case getType(actions.todoEdited):\n        const editedTodo = draft.toDos.find(\n          todo => todo.id === action.payload.id\n        );\n        if (editedTodo) editedTodo.content = action.payload.newContent;\n        draft.editId = undefined;\n        break;\n      case getType(actions.todoPriorityChanged):\n        const priorityToDo = draft.toDos.find(\n          todo => todo.id === action.payload.id\n        );\n        if (priorityToDo) priorityToDo.priority = action.payload.newPriority;\n        draft.sorted = false;\n        break;\n      case getType(actions.todoDeleted):\n        draft.toDos = draft.toDos.filter(todo => todo.id !== action.payload);\n        break;\n      case getType(actions.priorityCleared):\n        draft.toDos = draft.toDos.filter(\n          todo => todo.priority !== action.payload\n        );\n        break;\n      case getType(actions.allTodosCleared):\n        draft.toDos = [];\n        break;\n      case getType(actions.sortChanged):\n        draft.sort = action.payload;\n        draft.sorted = false;\n        break;\n      case getType(actions.sortApplied):\n        if (!draft.sorted) {\n          if (draft.sort === \"A-Z\") {\n            draft.toDos = draft.toDos.sort((a, b) =>\n              a.content > b.content ? 1 : -1\n            );\n          } else if (draft.sort === \"Z-A\") {\n            draft.toDos = draft.toDos.sort((a, b) =>\n              a.content > b.content ? -1 : 1\n            );\n          } else {\n            draft.toDos = draft.toDos.sort((a, b) =>\n              a.index > b.index ? 1 : -1\n            );\n          }\n          draft.sorted = true; // this is a bit hacky, but as this is timed I didn't have chance to solve this more elegantly\n        }\n\n        break;\n    }\n  });\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport const store = createStore(\n  persistedReducer,\n  composeWithDevTools(applyMiddleware())\n);\n//@ts-ignore\nexport const persistor = persistStore(store); // bad practice with the ignore above, but typescript error was taking up too much time.\n\nexport const useTypedSelector: TypedUseSelectorHook<State> = useSelector;\n","import { ActionType, createAction } from \"typesafe-actions\";\nimport { Priority, ToDo } from \".\";\n\nconst todoCreated = createAction(\"todo created\")<\n  Pick<ToDo, \"id\" | \"content\" | \"priority\">\n>();\nconst todoEdited = createAction(\"todo edited\")<{\n  id: string;\n  newContent: string;\n}>();\nconst todoPriorityChanged = createAction(\"todo priority changed\")<{\n  id: string;\n  newPriority: number;\n}>();\nconst todoDeleted = createAction(\"todo deleted\")<string>();\nconst priorityCleared = createAction(\"priority section cleared\")<Priority>();\nconst allTodosCleared = createAction(\"all todos cleared\")<void>();\nconst sortChanged = createAction(\"sort changed\")<string>();\nconst sortApplied = createAction(\"sort applied\")<void>();\nconst todoEditModeEntered = createAction(\"todo edit mode entered\")<string>();\nconst todoCompletedStateModified = createAction(\n  \"todo completition state modified\"\n)<string>();\n\nexport const actions = {\n  todoCompletedStateModified,\n  todoEditModeEntered,\n  todoCreated,\n  todoEdited,\n  todoPriorityChanged,\n  todoDeleted,\n  priorityCleared,\n  allTodosCleared,\n  sortChanged,\n  sortApplied\n};\n\nexport type Actions = ActionType<typeof actions>;\n","import styled from \"styled-components\";\n\nexport const Form = styled.form`\n  display: flex;\n  margin: 0 10px;\n`;\nexport const Input = styled.input`\n  padding: 10px;\n  flex-grow: 1;\n`;\nexport const Select = styled.select``;\nexport const Button = styled.button`\n  padding: 10px 20px;\n`;\n","import React, { useState } from \"react\";\nimport { Form, Input, Select, Button } from \"./style\";\nimport { useDispatch } from \"react-redux\";\nimport { actions } from \"../../store/actions\";\nimport { priorities, priorityToString } from \"./../../store/index\";\nimport uuid from \"uuid\";\n\nexport const ToDoForm = () => {\n  const dispatch = useDispatch();\n  const [content, setContent] = useState(\"\");\n  const [priority, setPriority] = useState(0);\n  return (\n    <Form\n      onSubmit={e => {\n        e.preventDefault();\n        dispatch(actions.todoCreated({ id: uuid.v4(), content, priority }));\n        setContent(\"\");\n      }}\n    >\n      <Input\n        value={content}\n        onChange={e => setContent(e.target.value)}\n        placeholder=\"What do you need to do?...\"\n      />\n      <Select\n        value={priorities[priority]}\n        onChange={e => setPriority(e.target.selectedIndex)}\n      >\n        {priorities.map((key, index) => (\n          <option key={key} value={key}>\n            {priorityToString(index)}\n          </option>\n        ))}\n      </Select>\n      <Button>Add To List</Button>\n    </Form>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const ListWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex: 1 1 auto;\n  overflow: scroll;\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 1 1;\n  overflow: scroll;\n  margin: 10px;\n`;\n\nexport const Header = styled.div`\n  display: flex;\n  align-items: center;\n  button {\n    margin-left: 10px;\n    color: #fff;\n  }\n`;\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  padding: 10px;\n  margin: 5px 0;\n  border-radius: 5px;\n  background: #fff;\n  border: 1px solid #e0e0e0;\n  color: #000;\n\n  align-items: center;\n  div {\n    flex-grow: 1;\n    margin: 0 10px;\n  }\n`;\n\nexport const TextEditor = styled.input`\n  flex-grow: 1;\n`;\n","import styled from \"styled-components\";\n\nexport const IconButton = styled.button`\n  background: transparent;\n  border: transparent;\n  transition-duration: 0.2s;\n  padding: 0;\n  opacity: 0.5;\n  :hover:not(:disabled) {\n    opacity: 1;\n  }\n`;\n","import React, { useState } from \"react\";\nimport { Wrapper, TextEditor } from \"./style\";\nimport { ToDo as ToDoType, useTypedSelector } from \"../../store\";\nimport { useDispatch } from \"react-redux\";\nimport { actions } from \"../../store/actions\";\nimport { useDrag } from \"react-dnd\";\nimport { FaEdit, FaCheck, FaTimes } from \"react-icons/fa\";\nimport { IconButton } from \"../IconButton\";\n\nexport const ToDo: React.FC<{\n  todo: ToDoType;\n}> = ({ todo: { content, id, priority, completed } }) => {\n  const dispatch = useDispatch();\n  const isInEditMode = useTypedSelector(state => state.editId === id);\n  const [tempValue, setTemp] = useState(content);\n\n  const [{ opacity }, drag] = useDrag({\n    item: { id, priority, type: \"*\" },\n    collect: (monitor: { isDragging: () => any }) => ({\n      opacity: monitor.isDragging() ? 0.4 : 1\n    })\n  });\n  return (\n    <Wrapper ref={drag}>\n      <input\n        checked={completed}\n        type=\"checkbox\"\n        onChange={() => dispatch(actions.todoCompletedStateModified(id))}\n      />\n      {!isInEditMode ? (\n        <>\n          <div> {content}</div>\n          <IconButton onClick={() => dispatch(actions.todoEditModeEntered(id))}>\n            <FaEdit size=\"16\" />\n          </IconButton>\n        </>\n      ) : (\n        <>\n          <TextEditor\n            value={tempValue}\n            onChange={e => setTemp(e.target.value)}\n          ></TextEditor>\n\n          <IconButton\n            onClick={() =>\n              dispatch(actions.todoEdited({ id, newContent: tempValue }))\n            }\n          >\n            <FaCheck size=\"16\" />\n          </IconButton>\n        </>\n      )}\n      <IconButton onClick={() => dispatch(actions.todoDeleted(id))}>\n        <FaTimes size=\"16\" />\n      </IconButton>\n    </Wrapper>\n  );\n};\n","import React from \"react\";\nimport { Wrapper, Header } from \"./style\";\nimport { ToDo as ToDoType, priorityToString } from \"../../store\";\nimport { ToDo } from \"../ToDo\";\nimport { useDrop } from \"react-dnd\";\nimport { IconButton } from \"../IconButton\";\nimport { FaTimesCircle } from \"react-icons/fa\";\n\nexport const ToDoList: React.FC<{\n  priority: number;\n  todos: ToDoType[];\n  onDrop: (item: any) => void;\n  clearGroup: () => void;\n}> = ({ priority, todos, onDrop, clearGroup }) => {\n  const [{ canDrop, isOver }, drop] = useDrop({\n    drop: onDrop,\n    accept: \"*\",\n    collect: (monitor: { isOver: () => any; canDrop: () => any }) => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop()\n    })\n  });\n\n  return (\n    <Wrapper ref={drop}>\n      <Header>\n        <h3>{priorityToString(priority)}</h3>\n        <IconButton disabled={todos.length === 0} onClick={clearGroup}>\n          <FaTimesCircle size=\"16\" />\n        </IconButton>\n      </Header>\n      <div\n        style={{\n          flex: \"1 1\",\n          background: isOver ? \"rgb(0, 77, 103)\" : \"transparent\"\n        }}\n      >\n        {todos.map(todo => (\n          <ToDo key={todo.id} todo={todo} />\n        ))}\n      </div>\n    </Wrapper>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  display: flex;\n  margin: 20px 10px 0 10px;\n\n  h3 {\n    padding: 0;\n    margin: 0;\n  }\n  button {\n    border-radius: 5px;\n    background: #fff;\n    border: 1px solid #e0e0e0;\n    margin: 0 15px 0 0;\n  }\n`;\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { actions } from \"../../store/actions\";\nimport { useTypedSelector } from \"../../store\";\nimport { Wrapper } from \"./style\";\n\nexport const SortFilter: React.FC<{ isDiabled: boolean }> = ({ isDiabled }) => {\n  const dispatch = useDispatch();\n  const options = [\"Index\", \"A-Z\", \"Z-A\"];\n  const sort = useTypedSelector(state => state.sort);\n  return (\n    <Wrapper>\n      <button\n        disabled={isDiabled}\n        onClick={() => dispatch(actions.allTodosCleared())}\n      >\n        Clear All\n      </button>\n      <h3>Sort:</h3>\n      <select\n        value={options.indexOf(sort)}\n        onChange={e =>\n          dispatch(actions.sortChanged(options[e.target.selectedIndex]))\n        }\n      >\n        {options.map((option, index) => (\n          <option key={index} value={index}>\n            {option}\n          </option>\n        ))}\n      </select>\n    </Wrapper>\n  );\n};\n","import React, { useEffect } from \"react\";\nimport { render } from \"react-dom\";\nimport \"./style.css\";\nimport { Provider, useDispatch } from \"react-redux\";\nimport { store, useTypedSelector, priorities } from \"./store\";\nimport { ToDoForm } from \"./components/ToDoForm\";\nimport { ToDoList } from \"./components/ToDoList\";\nimport { actions } from \"./store/actions\";\nimport { DndProvider } from \"react-dnd\";\nimport Backend from \"react-dnd-html5-backend\";\nimport { ListWrapper } from \"./components/ToDoList/style\";\nimport { SortFilter } from \"./components/SortFilter\";\n\nfunction App() {\n  const todos = useTypedSelector(state => state.toDos);\n  const isSorted = useTypedSelector(state => state.sorted);\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(actions.sortApplied());\n  }, [dispatch, isSorted]);\n\n  return (\n    <div className=\"App\">\n      <ToDoForm />\n      <SortFilter isDiabled={todos.length === 0} />\n      <ListWrapper>\n        {priorities.map((priority, index) => (\n          <ToDoList\n            key={index}\n            priority={index}\n            todos={todos.filter(todo => todo.priority === index)}\n            clearGroup={() => dispatch(actions.priorityCleared(index))}\n            onDrop={item =>\n              dispatch(\n                actions.todoPriorityChanged({\n                  newPriority: index,\n                  id: item.id\n                })\n              )\n            }\n          />\n        ))}\n      </ListWrapper>\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nrender(\n  <Provider store={store}>\n    <DndProvider backend={Backend}>\n      <App />\n    </DndProvider>\n  </Provider>,\n  rootElement\n);\n"],"sourceRoot":""}